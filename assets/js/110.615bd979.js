(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{572:function(t,a,e){"use strict";e.r(a);var s=e(14),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"数据库-数据库基础原理详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据库-数据库基础原理详解"}},[t._v("#")]),t._v(" 数据库 - 数据库基础原理详解")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Hi")]),t._v(" "),e("p",[t._v("你好，我是伊群。这里分享一些我整理的技术资料，以及对他们的看法，希望对大家有帮助！")])]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3"}},[t._v("数据库系统原理")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E4%B8%80%E3%80%81%E4%BA%8B%E5%8A%A1"}},[t._v("一、事务")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E6%A6%82%E5%BF%B5"}},[t._v("概念")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#acid"}},[t._v("ACID")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#autocommit"}},[t._v("AUTOCOMMIT")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E4%BA%8C%E3%80%81%E5%B9%B6%E5%8F%91%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98"}},[t._v("二、并发一致性问题")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E4%B8%A2%E5%A4%B1%E4%BF%AE%E6%94%B9"}},[t._v("丢失修改")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E8%AF%BB%E8%84%8F%E6%95%B0%E6%8D%AE"}},[t._v("读脏数据")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB"}},[t._v("不可重复读")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%B9%BB%E5%BD%B1%E8%AF%BB"}},[t._v("幻影读")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E4%B8%89%E3%80%81%E5%B0%81%E9%94%81"}},[t._v("三、封锁")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%B0%81%E9%94%81%E7%B2%92%E5%BA%A6"}},[t._v("封锁粒度")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%B0%81%E9%94%81%E7%B1%BB%E5%9E%8B"}},[t._v("封锁类型")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE"}},[t._v("封锁协议")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#mysql-%E9%9A%90%E5%BC%8F%E4%B8%8E%E6%98%BE%E5%BC%8F%E9%94%81%E5%AE%9A"}},[t._v("MySQL 隐式与显式锁定")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%9B%9B%E3%80%81%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB"}},[t._v("四、隔离级别")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E6%9C%AA%E6%8F%90%E4%BA%A4%E8%AF%BBread-uncommitted"}},[t._v("未提交读（READ UNCOMMITTED）")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E6%8F%90%E4%BA%A4%E8%AF%BBread-committed"}},[t._v("提交读（READ COMMITTED）")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BBrepeatable-read"}},[t._v("可重复读（REPEATABLE READ）")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8F%AF%E4%B8%B2%E8%A1%8C%E5%8C%96serializable"}},[t._v("可串行化（SERIALIZABLE）")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E4%BA%94%E3%80%81%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6"}},[t._v("五、多版本并发控制")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3"}},[t._v("基本思想")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E7%89%88%E6%9C%AC%E5%8F%B7"}},[t._v("版本号")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#undo-%E6%97%A5%E5%BF%97"}},[t._v("Undo 日志")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#readview"}},[t._v("ReadView")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%BF%AB%E7%85%A7%E8%AF%BB%E4%B8%8E%E5%BD%93%E5%89%8D%E8%AF%BB"}},[t._v("快照读与当前读")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%85%AD%E3%80%81next-key-locks"}},[t._v("六、Next-Key Locks")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#record-locks"}},[t._v("Record Locks")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#gap-locks"}},[t._v("Gap Locks")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#next-key-locks"}},[t._v("Next-Key Locks")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E4%B8%83%E3%80%81%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E7%90%86%E8%AE%BA"}},[t._v("七、关系数据库设计理论")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96"}},[t._v("函数依赖")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%BC%82%E5%B8%B8"}},[t._v("异常")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E8%8C%83%E5%BC%8F"}},[t._v("范式")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%85%AB%E3%80%81er-%E5%9B%BE"}},[t._v("八、ER 图")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E5%AE%9E%E4%BD%93%E7%9A%84%E4%B8%89%E7%A7%8D%E8%81%94%E7%B3%BB"}},[t._v("实体的三种联系")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E8%A1%A8%E7%A4%BA%E5%87%BA%E7%8E%B0%E5%A4%9A%E6%AC%A1%E7%9A%84%E5%85%B3%E7%B3%BB"}},[t._v("表示出现多次的关系")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E8%81%94%E7%B3%BB%E7%9A%84%E5%A4%9A%E5%90%91%E6%80%A7"}},[t._v("联系的多向性")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E8%A1%A8%E7%A4%BA%E5%AD%90%E7%B1%BB"}},[t._v("表示子类")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"}},[t._v("参考资料")])])])])]),t._v(" "),e("h2",{attrs:{id:"一、事务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、事务"}},[t._v("#")]),t._v(" 一、事务")]),t._v(" "),e("h3",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),e("p",[t._v("事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207222237925.png"}})]),e("br"),t._v(" "),e("h3",{attrs:{id:"acid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#acid"}},[t._v("#")]),t._v(" ACID")]),t._v(" "),e("h4",{attrs:{id:"_1-原子性-atomicity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-原子性-atomicity"}},[t._v("#")]),t._v(" 1. 原子性（Atomicity）")]),t._v(" "),e("p",[t._v("事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。")]),t._v(" "),e("p",[t._v("回滚可以用回滚日志（Undo Log）来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。")]),t._v(" "),e("h4",{attrs:{id:"_2-一致性-consistency"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-一致性-consistency"}},[t._v("#")]),t._v(" 2. 一致性（Consistency）")]),t._v(" "),e("p",[t._v("数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对同一个数据的读取结果都是相同的。")]),t._v(" "),e("h4",{attrs:{id:"_3-隔离性-isolation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-隔离性-isolation"}},[t._v("#")]),t._v(" 3. 隔离性（Isolation）")]),t._v(" "),e("p",[t._v("一个事务所做的修改在最终提交以前，对其它事务是不可见的。")]),t._v(" "),e("h4",{attrs:{id:"_4-持久性-durability"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-持久性-durability"}},[t._v("#")]),t._v(" 4. 持久性（Durability）")]),t._v(" "),e("p",[t._v("一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。")]),t._v(" "),e("p",[t._v("系统发生崩溃可以用重做日志（Redo Log）进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是数据页的物理修改。")]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系：")]),t._v(" "),e("ul",[e("li",[t._v("只有满足一致性，事务的执行结果才是正确的。")]),t._v(" "),e("li",[t._v("在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。")]),t._v(" "),e("li",[t._v("在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。")]),t._v(" "),e("li",[t._v("事务满足持久化是为了能应对系统崩溃的情况。")])]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207210437023.png"}})]),e("br"),t._v(" "),e("h3",{attrs:{id:"autocommit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#autocommit"}},[t._v("#")]),t._v(" AUTOCOMMIT")]),t._v(" "),e("p",[t._v("MySQL 默认采用自动提交模式。也就是说，如果不显式使用"),e("code",[t._v("START TRANSACTION")]),t._v("语句来开始一个事务，那么每个查询操作都会被当做一个事务并自动提交。")]),t._v(" "),e("h2",{attrs:{id:"二、并发一致性问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、并发一致性问题"}},[t._v("#")]),t._v(" 二、并发一致性问题")]),t._v(" "),e("p",[t._v("在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。")]),t._v(" "),e("h3",{attrs:{id:"丢失修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#丢失修改"}},[t._v("#")]),t._v(" 丢失修改")]),t._v(" "),e("p",[t._v("丢失修改指一个事务的更新操作被另外一个事务的更新操作替换。一般在现实生活中常会遇到，例如：T"),e("sub",[t._v("1")]),t._v(" 和 T"),e("sub",[t._v("2")]),t._v(" 两个事务都对一个数据进行修改，T"),e("sub",[t._v("1")]),t._v(" 先修改并提交生效，T"),e("sub",[t._v("2")]),t._v(" 随后修改，T"),e("sub",[t._v("2")]),t._v(" 的修改覆盖了 T"),e("sub",[t._v("1")]),t._v(" 的修改。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207221744244.png"}})]),e("br"),t._v(" "),e("h3",{attrs:{id:"读脏数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#读脏数据"}},[t._v("#")]),t._v(" 读脏数据")]),t._v(" "),e("p",[t._v("读脏数据指在不同的事务下，当前事务可以读到另外事务未提交的数据。例如：T"),e("sub",[t._v("1")]),t._v(" 修改一个数据但未提交，T"),e("sub",[t._v("2")]),t._v(" 随后读取这个数据。如果 T"),e("sub",[t._v("1")]),t._v(" 撤销了这次修改，那么 T"),e("sub",[t._v("2")]),t._v(" 读取的数据是脏数据。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207221920368.png"}})]),e("br"),t._v(" "),e("h3",{attrs:{id:"不可重复读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不可重复读"}},[t._v("#")]),t._v(" 不可重复读")]),t._v(" "),e("p",[t._v("不可重复读指在一个事务内多次读取同一数据集合。在这一事务还未结束前，另一事务也访问了该同一数据集合并做了修改，由于第二个事务的修改，第一次事务的两次读取的数据可能不一致。例如：T"),e("sub",[t._v("2")]),t._v(" 读取一个数据，T"),e("sub",[t._v("1")]),t._v(" 对该数据做了修改。如果 T"),e("sub",[t._v("2")]),t._v(" 再次读取这个数据，此时读取的结果和第一次读取的结果不同。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207222102010.png"}})]),e("br"),t._v(" "),e("h3",{attrs:{id:"幻影读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#幻影读"}},[t._v("#")]),t._v(" 幻影读")]),t._v(" "),e("p",[t._v("幻读本质上也属于不可重复读的情况，T"),e("sub",[t._v("1")]),t._v(" 读取某个范围的数据，T"),e("sub",[t._v("2")]),t._v(" 在这个范围内插入新的数据，T"),e("sub",[t._v("1")]),t._v(" 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207222134306.png"}})]),e("br"),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("产生并发不一致性问题的主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。")]),t._v(" "),e("h2",{attrs:{id:"三、封锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、封锁"}},[t._v("#")]),t._v(" 三、封锁")]),t._v(" "),e("h3",{attrs:{id:"封锁粒度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#封锁粒度"}},[t._v("#")]),t._v(" 封锁粒度")]),t._v(" "),e("p",[t._v("MySQL 中提供了两种封锁粒度：行级锁以及表级锁。")]),t._v(" "),e("p",[t._v("应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的数据量越少，发生锁争用的可能就越小，系统的并发程度就越高。")]),t._v(" "),e("p",[t._v("但是加锁需要消耗资源，锁的各种操作（包括获取锁、释放锁、以及检查锁状态）都会增加系统开销。因此封锁粒度越小，系统开销就越大。")]),t._v(" "),e("p",[t._v("在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。")]),t._v(" "),e("h3",{attrs:{id:"封锁类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#封锁类型"}},[t._v("#")]),t._v(" 封锁类型")]),t._v(" "),e("h4",{attrs:{id:"_1-读写锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-读写锁"}},[t._v("#")]),t._v(" 1. 读写锁")]),t._v(" "),e("ul",[e("li",[t._v("互斥锁（Exclusive），简写为 X 锁，又称写锁。")]),t._v(" "),e("li",[t._v("共享锁（Shared），简写为 S 锁，又称读锁。")])]),t._v(" "),e("p",[t._v("有以下两个规定：")]),t._v(" "),e("ul",[e("li",[t._v("一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。")]),t._v(" "),e("li",[t._v("一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。")])]),t._v(" "),e("p",[t._v("锁的兼容关系如下：")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207213523777.png"}})]),e("br"),t._v(" "),e("h4",{attrs:{id:"_2-意向锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-意向锁"}},[t._v("#")]),t._v(" 2. 意向锁")]),t._v(" "),e("p",[t._v("使用意向锁（Intention Locks）可以更容易地支持多粒度封锁。")]),t._v(" "),e("p",[t._v("在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其它事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。")]),t._v(" "),e("p",[t._v("意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定：")]),t._v(" "),e("ul",[e("li",[t._v("一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；")]),t._v(" "),e("li",[t._v("一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。")])]),t._v(" "),e("p",[t._v("通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 加 X 锁失败。")]),t._v(" "),e("p",[t._v("各种锁的兼容关系如下：")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207214442687.png"}})]),e("br"),t._v(" "),e("p",[t._v("解释如下：")]),t._v(" "),e("ul",[e("li",[t._v("任意 IS/IX 锁之间都是兼容的，因为它们只表示想要对表加锁，而不是真正加锁；")]),t._v(" "),e("li",[t._v("这里兼容关系针对的是表级锁，而表级的 IX 锁和行级的 X 锁兼容，两个事务可以对两个数据行加 X 锁。（事务 T"),e("sub",[t._v("1")]),t._v(" 想要对数据行 R"),e("sub",[t._v("1")]),t._v(" 加 X 锁，事务 T"),e("sub",[t._v("2")]),t._v(" 想要对同一个表的数据行 R"),e("sub",[t._v("2")]),t._v(" 加 X 锁，两个事务都需要对该表加 IX 锁，但是 IX 锁是兼容的，并且 IX 锁与行级的 X 锁也是兼容的，因此两个事务都能加锁成功，对同一个表中的两个数据行做修改。）")])]),t._v(" "),e("h3",{attrs:{id:"封锁协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#封锁协议"}},[t._v("#")]),t._v(" 封锁协议")]),t._v(" "),e("h4",{attrs:{id:"_1-三级封锁协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-三级封锁协议"}},[t._v("#")]),t._v(" 1. 三级封锁协议")]),t._v(" "),e("p",[e("strong",[t._v("一级封锁协议")])]),t._v(" "),e("p",[t._v("事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。")]),t._v(" "),e("p",[t._v("可以解决丢失修改问题，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改就不会被覆盖。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207220440451.png"}})]),e("br"),t._v(" "),e("p",[e("strong",[t._v("二级封锁协议")])]),t._v(" "),e("p",[t._v("在一级的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。")]),t._v(" "),e("p",[t._v("可以解决读脏数据问题，因为如果一个事务在对数据 A 进行修改，根据 1 级封锁协议，会加 X 锁，那么就不能再加 S 锁了，也就是不会读入数据。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207220831843.png"}})]),e("br"),t._v(" "),e("p",[e("strong",[t._v("三级封锁协议")])]),t._v(" "),e("p",[t._v("在二级的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。")]),t._v(" "),e("p",[t._v("可以解决不可重复读的问题，因为读 A 时，其它事务不能对 A 加 X 锁，从而避免了在读的期间数据发生改变。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207221313819.png"}})]),e("br"),t._v(" "),e("h4",{attrs:{id:"_2-两段锁协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-两段锁协议"}},[t._v("#")]),t._v(" 2. 两段锁协议")]),t._v(" "),e("p",[t._v("加锁和解锁分为两个阶段进行。")]),t._v(" "),e("p",[t._v("可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。串行执行的事务互不干扰，不会出现并发一致性问题。")]),t._v(" "),e("p",[t._v("事务遵循两段锁协议是保证可串行化调度的充分条件。例如以下操作满足两段锁协议，它是可串行化调度。")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[t._v("lock-x(A)...lock-s(B)...lock-s(C)...unlock(A)...unlock(C)...unlock(B)\n")])])]),e("p",[t._v("但不是必要条件，例如以下操作不满足两段锁协议，但它还是可串行化调度。")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[t._v("lock-x(A)...unlock(A)...lock-s(B)...unlock(B)...lock-s(C)...unlock(C)\n")])])]),e("h3",{attrs:{id:"mysql-隐式与显式锁定"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-隐式与显式锁定"}},[t._v("#")]),t._v(" MySQL 隐式与显式锁定")]),t._v(" "),e("p",[t._v("MySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。")]),t._v(" "),e("p",[t._v("InnoDB 也可以使用特定的语句进行显示锁定：")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LOCK")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("In")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SHARE")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MODE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOR")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"四、隔离级别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、隔离级别"}},[t._v("#")]),t._v(" 四、隔离级别")]),t._v(" "),e("h3",{attrs:{id:"未提交读-read-uncommitted"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#未提交读-read-uncommitted"}},[t._v("#")]),t._v(" 未提交读（READ UNCOMMITTED）")]),t._v(" "),e("p",[t._v("事务中的修改，即使没有提交，对其它事务也是可见的。")]),t._v(" "),e("h3",{attrs:{id:"提交读-read-committed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交读-read-committed"}},[t._v("#")]),t._v(" 提交读（READ COMMITTED）")]),t._v(" "),e("p",[t._v("一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。")]),t._v(" "),e("h3",{attrs:{id:"可重复读-repeatable-read"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可重复读-repeatable-read"}},[t._v("#")]),t._v(" 可重复读（REPEATABLE READ）")]),t._v(" "),e("p",[t._v("保证在同一个事务中多次读取同一数据的结果是一样的。")]),t._v(" "),e("h3",{attrs:{id:"可串行化-serializable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可串行化-serializable"}},[t._v("#")]),t._v(" 可串行化（SERIALIZABLE）")]),t._v(" "),e("p",[t._v("强制事务串行执行，这样多个事务互不干扰，不会出现并发一致性问题。")]),t._v(" "),e("p",[t._v("该隔离级别需要加锁实现，因为要使用加锁机制保证同一时间只有一个事务执行，也就是保证事务串行执行。")]),t._v(" "),e("hr"),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191207223400787.png"}})]),e("br"),t._v(" "),e("h2",{attrs:{id:"五、多版本并发控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、多版本并发控制"}},[t._v("#")]),t._v(" 五、多版本并发控制")]),t._v(" "),e("p",[t._v("多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，要求很低，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。")]),t._v(" "),e("h3",{attrs:{id:"基本思想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本思想"}},[t._v("#")]),t._v(" 基本思想")]),t._v(" "),e("p",[t._v("在封锁一节中提到，加锁能解决多个事务同时执行时出现的并发一致性问题。在实际场景中读操作往往多于写操作，因此又引入了读写锁来避免不必要的加锁操作，例如读和读没有互斥关系。读写锁中读和写操作仍然是互斥的，而 MVCC 利用了多版本的思想，写操作更新最新的版本快照，而读操作去读旧版本快照，没有互斥关系，这一点和 CopyOnWrite 类似。")]),t._v(" "),e("p",[t._v("在 MVCC 中事务的修改操作（DELETE、INSERT、UPDATE）会为数据行新增一个版本快照。")]),t._v(" "),e("p",[t._v("脏读和不可重复读最根本的原因是事务读取到其它事务未提交的修改。在事务进行读取操作时，为了解决脏读和不可重复读问题，MVCC 规定只能读取已经提交的快照。当然一个事务可以读取自身未提交的快照，这不算是脏读。")]),t._v(" "),e("h3",{attrs:{id:"版本号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本号"}},[t._v("#")]),t._v(" 版本号")]),t._v(" "),e("ul",[e("li",[t._v("系统版本号 SYS_ID：是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。")]),t._v(" "),e("li",[t._v("事务版本号 TRX_ID ：事务开始时的系统版本号。")])]),t._v(" "),e("h3",{attrs:{id:"undo-日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#undo-日志"}},[t._v("#")]),t._v(" Undo 日志")]),t._v(" "),e("p",[t._v("MVCC 的多版本指的是多个版本的快照，快照存储在 Undo 日志中，该日志通过回滚指针 ROLL_PTR 把一个数据行的所有快照连接起来。")]),t._v(" "),e("p",[t._v("例如在 MySQL 创建一个表 t，包含主键 id 和一个字段 x。我们先插入一个数据行，然后对该数据行执行两次更新操作。")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" t "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" t "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("因为没有使用 "),e("code",[t._v("START TRANSACTION")]),t._v(" 将上面的操作当成一个事务来执行，根据 MySQL 的 AUTOCOMMIT 机制，每个操作都会被当成一个事务来执行，所以上面的操作总共涉及到三个事务。快照中除了记录事务版本号 TRX_ID 和操作之外，还记录了一个 bit 的 DEL 字段，用于标记是否被删除。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208164808217.png"}})]),e("br"),t._v(" "),e("p",[t._v("INSERT、UPDATE、DELETE 操作会创建一个日志，并将事务版本号 TRX_ID  写入。DELETE 可以看成是一个特殊的 UPDATE，还会额外将 DEL 字段设置为 1。")]),t._v(" "),e("h3",{attrs:{id:"readview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readview"}},[t._v("#")]),t._v(" ReadView")]),t._v(" "),e("p",[t._v("MVCC 维护了一个 ReadView 结构，主要包含了当前系统未提交的事务列表 TRX_IDs {TRX_ID_1, TRX_ID_2, ...}，还有该列表的最小值 TRX_ID_MIN 和 TRX_ID_MAX。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208171445674.png"}})]),e("br"),t._v(" "),e("p",[t._v("在进行 SELECT 操作时，根据数据行快照的 TRX_ID 与 TRX_ID_MIN 和 TRX_ID_MAX 之间的关系，从而判断数据行快照是否可以使用：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("TRX_ID < TRX_ID_MIN，表示该数据行快照时在当前所有未提交事务之前进行更改的，因此可以使用。")])]),t._v(" "),e("li",[e("p",[t._v("TRX_ID > TRX_ID_MAX，表示该数据行快照是在事务启动之后被更改的，因此不可使用。")])]),t._v(" "),e("li",[e("p",[t._v("TRX_ID_MIN <= TRX_ID <= TRX_ID_MAX，需要根据隔离级别再进行判断：")]),t._v(" "),e("ul",[e("li",[t._v("提交读：如果 TRX_ID  在 TRX_IDs  列表中，表示该数据行快照对应的事务还未提交，则该快照不可使用。否则表示已经提交，可以使用。")]),t._v(" "),e("li",[t._v("可重复读：都不可以使用。因为如果可以使用的话，那么其它事务也可以读到这个数据行快照并进行修改，那么当前事务再去读这个数据行得到的值就会发生改变，也就是出现了不可重复读问题。")])])])]),t._v(" "),e("p",[t._v("在数据行快照不可使用的情况下，需要沿着 Undo Log 的回滚指针 ROLL_PTR  找到下一个快照，再进行上面的判断。")]),t._v(" "),e("h3",{attrs:{id:"快照读与当前读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#快照读与当前读"}},[t._v("#")]),t._v(" 快照读与当前读")]),t._v(" "),e("h4",{attrs:{id:"_1-快照读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-快照读"}},[t._v("#")]),t._v(" 1. 快照读")]),t._v(" "),e("p",[t._v("MVCC 的 SELECT 操作是快照中的数据，不需要进行加锁操作。")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h4",{attrs:{id:"_2-当前读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-当前读"}},[t._v("#")]),t._v(" 2. 当前读")]),t._v(" "),e("p",[t._v("MVCC 其它会对数据库进行修改的操作（INSERT、UPDATE、DELETE）需要进行加锁操作，从而读取最新的数据。可以看到 MVCC 并不是完全不用加锁，而只是避免了 SELECT 的加锁操作。")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("在进行 SELECT 操作时，可以强制指定进行加锁操作。以下第一个语句需要加 S 锁，第二个需要加 X 锁。")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" ? "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lock")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("share")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" ? "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"六、next-key-locks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六、next-key-locks"}},[t._v("#")]),t._v(" 六、Next-Key Locks")]),t._v(" "),e("p",[t._v("Next-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实现。")]),t._v(" "),e("p",[t._v("MVCC 不能解决幻影读问题，Next-Key Locks 就是为了解决这个问题而存在的。在可重复读（REPEATABLE READ）隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。")]),t._v(" "),e("h3",{attrs:{id:"record-locks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#record-locks"}},[t._v("#")]),t._v(" Record Locks")]),t._v(" "),e("p",[t._v("锁定一个记录上的索引，而不是记录本身。")]),t._v(" "),e("p",[t._v("如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。")]),t._v(" "),e("h3",{attrs:{id:"gap-locks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gap-locks"}},[t._v("#")]),t._v(" Gap Locks")]),t._v(" "),e("p",[t._v("锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" t "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("BETWEEN")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOR")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"next-key-locks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#next-key-locks"}},[t._v("#")]),t._v(" Next-Key Locks")]),t._v(" "),e("p",[t._v("它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。它锁定一个前开后闭区间，例如一个索引包含以下值：10, 11, 13, and 20，那么就需要锁定以下区间：")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("∞"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("∞"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"七、关系数据库设计理论"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七、关系数据库设计理论"}},[t._v("#")]),t._v(" 七、关系数据库设计理论")]),t._v(" "),e("h3",{attrs:{id:"函数依赖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数依赖"}},[t._v("#")]),t._v(" 函数依赖")]),t._v(" "),e("p",[t._v("记 A->B 表示 A 函数决定 B，也可以说 B 函数依赖于 A。")]),t._v(" "),e("p",[t._v("如果 {A1，A2，... ，An} 是关系的一个或多个属性的集合，该集合函数决定了关系的其它所有属性并且是最小的，那么该集合就称为键码。")]),t._v(" "),e("p",[t._v("对于 A->B，如果能找到 A 的真子集 A'，使得 A'-> B，那么 A->B 就是部分函数依赖，否则就是完全函数依赖。")]),t._v(" "),e("p",[t._v("对于 A->B，B->C，则 A->C 是一个传递函数依赖。")]),t._v(" "),e("h3",{attrs:{id:"异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[t._v("#")]),t._v(" 异常")]),t._v(" "),e("p",[t._v("以下的学生课程关系的函数依赖为 {Sno, Cname} -> {Sname, Sdept, Mname, Grade}，键码为 {Sno, Cname}。也就是说，确定学生和课程之后，就能确定其它信息。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("Sno")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Sname")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Sdept")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Mname")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Cname")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Grade")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学生-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("院长-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("课程-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("90")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学生-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("课程-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("80")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学生-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("课程-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("100")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学生-3")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("课程-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("95")])])])]),t._v(" "),e("p",[t._v("不符合范式的关系，会产生很多异常，主要有以下四种异常：")]),t._v(" "),e("ul",[e("li",[t._v("冗余数据：例如 "),e("code",[t._v("学生-2")]),t._v(" 出现了两次。")]),t._v(" "),e("li",[t._v("修改异常：修改了一个记录中的信息，但是另一个记录中相同的信息却没有被修改。")]),t._v(" "),e("li",[t._v("删除异常：删除一个信息，那么也会丢失其它信息。例如删除了 "),e("code",[t._v("课程-1")]),t._v(" 需要删除第一行和第三行，那么 "),e("code",[t._v("学生-1")]),t._v(" 的信息就会丢失。")]),t._v(" "),e("li",[t._v("插入异常：例如想要插入一个学生的信息，如果这个学生还没选课，那么就无法插入。")])]),t._v(" "),e("h3",{attrs:{id:"范式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#范式"}},[t._v("#")]),t._v(" 范式")]),t._v(" "),e("p",[t._v("范式理论是为了解决以上提到四种异常。")]),t._v(" "),e("p",[t._v("高级别范式的依赖于低级别的范式，1NF 是最低级别的范式。")]),t._v(" "),e("h4",{attrs:{id:"_1-第一范式-1nf"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-第一范式-1nf"}},[t._v("#")]),t._v(" 1. 第一范式 (1NF)")]),t._v(" "),e("p",[t._v("属性不可分。")]),t._v(" "),e("h4",{attrs:{id:"_2-第二范式-2nf"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-第二范式-2nf"}},[t._v("#")]),t._v(" 2. 第二范式 (2NF)")]),t._v(" "),e("p",[t._v("每个非主属性完全函数依赖于键码。")]),t._v(" "),e("p",[t._v("可以通过分解来满足。")]),t._v(" "),e("p",[e("font",{attrs:{size:"4"}},[e("strong",[t._v("分解前")])]),e("br")],1),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("Sno")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Sname")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Sdept")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Mname")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Cname")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Grade")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学生-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("院长-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("课程-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("90")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学生-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("课程-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("80")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学生-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("课程-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("100")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学生-3")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("课程-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("95")])])])]),t._v(" "),e("p",[t._v("以上学生课程关系中，{Sno, Cname} 为键码，有如下函数依赖：")]),t._v(" "),e("ul",[e("li",[t._v("Sno -> Sname, Sdept")]),t._v(" "),e("li",[t._v("Sdept -> Mname")]),t._v(" "),e("li",[t._v("Sno, Cname-> Grade")])]),t._v(" "),e("p",[t._v("Grade 完全函数依赖于键码，它没有任何冗余数据，每个学生的每门课都有特定的成绩。")]),t._v(" "),e("p",[t._v("Sname, Sdept 和 Mname 都部分依赖于键码，当一个学生选修了多门课时，这些数据就会出现多次，造成大量冗余数据。")]),t._v(" "),e("p",[e("font",{attrs:{size:"4"}},[e("strong",[t._v("分解后")])]),e("br")],1),t._v(" "),e("p",[t._v("关系-1")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("Sno")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Sname")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Sdept")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Mname")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学生-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("院长-1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学生-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学生-3")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")])])])]),t._v(" "),e("p",[t._v("有以下函数依赖：")]),t._v(" "),e("ul",[e("li",[t._v("Sno -> Sname, Sdept")]),t._v(" "),e("li",[t._v("Sdept -> Mname")])]),t._v(" "),e("p",[t._v("关系-2")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("Sno")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Cname")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Grade")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("课程-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("90")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("课程-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("80")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("课程-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("100")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("课程-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("95")])])])]),t._v(" "),e("p",[t._v("有以下函数依赖：")]),t._v(" "),e("ul",[e("li",[t._v("Sno, Cname ->  Grade")])]),t._v(" "),e("h4",{attrs:{id:"_3-第三范式-3nf"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-第三范式-3nf"}},[t._v("#")]),t._v(" 3. 第三范式 (3NF)")]),t._v(" "),e("p",[t._v("非主属性不传递函数依赖于键码。")]),t._v(" "),e("p",[t._v("上面的 关系-1 中存在以下传递函数依赖：")]),t._v(" "),e("ul",[e("li",[t._v("Sno -> Sdept -> Mname")])]),t._v(" "),e("p",[t._v("可以进行以下分解：")]),t._v(" "),e("p",[t._v("关系-11")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("Sno")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Sname")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Sdept")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学生-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学生-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学生-3")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")])])])]),t._v(" "),e("p",[t._v("关系-12")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("Sdept")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Mname")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("院长-1")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("学院-2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("院长-2")])])])]),t._v(" "),e("h2",{attrs:{id:"八、er-图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八、er-图"}},[t._v("#")]),t._v(" 八、ER 图")]),t._v(" "),e("p",[t._v("Entity-Relationship，有三个组成部分：实体、属性、联系。")]),t._v(" "),e("p",[t._v("用来进行关系型数据库系统的概念设计。")]),t._v(" "),e("h3",{attrs:{id:"实体的三种联系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实体的三种联系"}},[t._v("#")]),t._v(" 实体的三种联系")]),t._v(" "),e("p",[t._v("包含一对一，一对多，多对多三种。")]),t._v(" "),e("ul",[e("li",[t._v("如果 A 到 B 是一对多关系，那么画个带箭头的线段指向 B；")]),t._v(" "),e("li",[t._v("如果是一对一，画两个带箭头的线段；")]),t._v(" "),e("li",[t._v("如果是多对多，画两个不带箭头的线段。")])]),t._v(" "),e("p",[t._v("下图的 Course 和 Student 是一对多的关系。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/1d28ad05-39e5-49a2-a6a1-a6f496adba6a.png",width:"380px"}})]),e("br"),t._v(" "),e("h3",{attrs:{id:"表示出现多次的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表示出现多次的关系"}},[t._v("#")]),t._v(" 表示出现多次的关系")]),t._v(" "),e("p",[t._v("一个实体在联系出现几次，就要用几条线连接。")]),t._v(" "),e("p",[t._v("下图表示一个课程的先修关系，先修关系出现两个 Course 实体，第一个是先修课程，后一个是后修课程，因此需要用两条线来表示这种关系。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ac929ea3-daca-40ec-9e95-4b2fa6678243.png",width:"250px"}})]),e("br"),t._v(" "),e("h3",{attrs:{id:"联系的多向性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#联系的多向性"}},[t._v("#")]),t._v(" 联系的多向性")]),t._v(" "),e("p",[t._v("虽然老师可以开设多门课，并且可以教授多名学生，但是对于特定的学生和课程，只有一个老师教授，这就构成了一个三元联系。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/5bb1b38a-527e-4802-a385-267dadbd30ba.png",width:"350px"}})]),e("br"),t._v(" "),e("h3",{attrs:{id:"表示子类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表示子类"}},[t._v("#")]),t._v(" 表示子类")]),t._v(" "),e("p",[t._v("用一个三角形和两条线来连接类和子类，与子类有关的属性和联系都连到子类上，而与父类和子类都有关的连到父类上。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/14389ea4-8d96-4e96-9f76-564ca3324c1e.png",width:"450px"}})]),e("br"),t._v(" "),e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),e("ul",[e("li",[t._v("AbrahamSilberschatz, HenryF.Korth, S.Sudarshan, 等. 数据库系统概念 [M]. 机械工业出版社, 2006.")]),t._v(" "),e("li",[t._v("施瓦茨. 高性能 MYSQL(第3版)[M]. 电子工业出版社, 2013.")]),t._v(" "),e("li",[t._v("史嘉权. 数据库系统概论[M]. 清华大学出版社有限公司, 2006.")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://dev.mysql.com/doc/refman/5.7/en/innodb-storage-engine.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("The InnoDB Storage Engine"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.slideshare.net/ErnestoHernandezRodriguez/transaction-isolation-levels",target:"_blank",rel:"noopener noreferrer"}},[t._v("Transaction isolation levels"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"http://scanftree.com/dbms/2-phase-locking-protocol",target:"_blank",rel:"noopener noreferrer"}},[t._v("Concurrency Control"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.slideshare.net/brshristov/the-nightmare-of-locking-blocking-and-isolation-levels-46391666",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Nightmare of Locking, Blocking and Isolation Levels!"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://aksakalli.github.io/2012/03/12/database-normalization-and-normal-forms-with-an-example.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Database Normalization and Normal Forms with an Example"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://blog.jcole.us/2014/04/16/the-basics-of-the-innodb-undo-logging-and-history-system/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The basics of the InnoDB undo logging and history system"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.brightbox.com/blog/2013/10/31/on-mysql-locks/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL locking for the busy web developer"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://draveness.me/mysql-innodb",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅入浅出 MySQL 和 InnoDB"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://tech.meituan.com/2014/08/20/innodb-lock.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Innodb 中的事务隔离级别和锁的关系"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);