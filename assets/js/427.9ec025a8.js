(window.webpackJsonp=window.webpackJsonp||[]).push([[427],{895:function(a,t,s){"use strict";s.r(t);var n=s(14),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java-jvm-虚拟机知识详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-jvm-虚拟机知识详解"}},[a._v("#")]),a._v(" Java JVM - 虚拟机知识详解")]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("Hi")]),a._v(" "),s("p",[a._v("你好，我是伊群。这里分享一些我整理的技术资料，以及对他们的看法，希望对大家有帮助！")])]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#java-%E8%99%9A%E6%8B%9F%E6%9C%BA"}},[a._v("Java 虚拟机")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E4%B8%80%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F"}},[a._v("一、运行时数据区域")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8"}},[a._v("程序计数器")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#java-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88"}},[a._v("Java 虚拟机栈")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88"}},[a._v("本地方法栈")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E5%A0%86"}},[a._v("堆")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E6%96%B9%E6%B3%95%E5%8C%BA"}},[a._v("方法区")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%B8%B8%E9%87%8F%E6%B1%A0"}},[a._v("运行时常量池")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98"}},[a._v("直接内存")])])])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%8C%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86"}},[a._v("二、垃圾收集")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E5%8F%AF%E8%A2%AB%E5%9B%9E%E6%94%B6"}},[a._v("判断一个对象是否可被回收")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B"}},[a._v("引用类型")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95"}},[a._v("垃圾收集算法")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8"}},[a._v("垃圾收集器")])])])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B8%89%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5"}},[a._v("三、内存分配与回收策略")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#minor-gc-%E5%92%8C-full-gc"}},[a._v("Minor GC 和 Full GC")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5"}},[a._v("内存分配策略")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#full-gc-%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6"}},[a._v("Full GC 的触发条件")])])])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E5%9B%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6"}},[a._v("四、类加载机制")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F"}},[a._v("类的生命周期")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B"}},[a._v("类加载过程")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E6%97%B6%E6%9C%BA"}},[a._v("类初始化时机")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E7%B1%BB%E4%B8%8E%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8"}},[a._v("类与类加载器")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%88%86%E7%B1%BB"}},[a._v("类加载器分类")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B"}},[a._v("双亲委派模型")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%AE%9E%E7%8E%B0"}},[a._v("自定义类加载器实现")])])])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"}},[a._v("参考资料")])])])])]),a._v(" "),s("p",[a._v("本文大部分内容参考   "),s("strong",[a._v("周志明《深入理解 Java 虚拟机》")]),a._v("  ，想要深入学习的话请看原书。")]),a._v(" "),s("h2",{attrs:{id:"一、运行时数据区域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、运行时数据区域"}},[a._v("#")]),a._v(" 一、运行时数据区域")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/5778d113-8e13-4c53-b5bf-801e58080b97.png",width:"400px"}})]),s("br"),a._v(" "),s("h3",{attrs:{id:"程序计数器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序计数器"}},[a._v("#")]),a._v(" 程序计数器")]),a._v(" "),s("p",[a._v("记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空）。")]),a._v(" "),s("h3",{attrs:{id:"java-虚拟机栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-虚拟机栈"}},[a._v("#")]),a._v(" Java 虚拟机栈")]),a._v(" "),s("p",[a._v("每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/8442519f-0b4d-48f4-8229-56f984363c69.png",width:"400px"}})]),s("br"),a._v(" "),s("p",[a._v("可以通过 -Xss 这个虚拟机参数来指定每个线程的 Java 虚拟机栈内存大小，在 JDK 1.4 中默认为 256K，而在 JDK 1.5+ 默认为 1M：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("java "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Xss2M")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HackTheJava")]),a._v("\n")])])]),s("p",[a._v("该区域可能抛出以下异常：")]),a._v(" "),s("ul",[s("li",[a._v("当线程请求的栈深度超过最大值，会抛出 StackOverflowError 异常；")]),a._v(" "),s("li",[a._v("栈进行动态扩展时如果无法申请到足够内存，会抛出 OutOfMemoryError 异常。")])]),a._v(" "),s("h3",{attrs:{id:"本地方法栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地方法栈"}},[a._v("#")]),a._v(" 本地方法栈")]),a._v(" "),s("p",[a._v("本地方法栈与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。")]),a._v(" "),s("p",[a._v("本地方法一般是用其它语言（C、C++ 或汇编语言等）编写的，并且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特别处理。")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/66a6899d-c6b0-4a47-8569-9d08f0baf86c.png",width:"300px"}})]),s("br"),a._v(" "),s("h3",{attrs:{id:"堆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[a._v("#")]),a._v(" 堆")]),a._v(" "),s("p",[a._v('所有对象都在这里分配内存，是垃圾收集的主要区域（"GC 堆"）。')]),a._v(" "),s("p",[a._v("现代的垃圾收集器基本都是采用分代收集算法，其主要的思想是针对不同类型的对象采取不同的垃圾回收算法。可以将堆分成两块：")]),a._v(" "),s("ul",[s("li",[a._v("新生代（Young Generation）")]),a._v(" "),s("li",[a._v("老年代（Old Generation）")])]),a._v(" "),s("p",[a._v("堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。")]),a._v(" "),s("p",[a._v("可以通过 -Xms 和 -Xmx 这两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("java "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Xms1M")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Xmx2M")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HackTheJava")]),a._v("\n")])])]),s("h3",{attrs:{id:"方法区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法区"}},[a._v("#")]),a._v(" 方法区")]),a._v(" "),s("p",[a._v("用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。")]),a._v(" "),s("p",[a._v("和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。")]),a._v(" "),s("p",[a._v("对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。")]),a._v(" "),s("p",[a._v("HotSpot 虚拟机把它当成永久代来进行垃圾回收。但很难确定永久代的大小，因为它受到很多因素影响，并且每次 Full GC 之后永久代的大小都会改变，所以经常会抛出 OutOfMemoryError 异常。为了更容易管理方法区，从 JDK 1.8 开始，移除永久代，并把方法区移至元空间，它位于本地内存中，而不是虚拟机内存中。")]),a._v(" "),s("p",[a._v("方法区是一个 JVM 规范，永久代与元空间都是其一种实现方式。在 JDK 1.8 之后，原来永久代的数据被分到了堆和元空间中。元空间存储类的元信息，静态变量和常量池等放入堆中。")]),a._v(" "),s("h3",{attrs:{id:"运行时常量池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行时常量池"}},[a._v("#")]),a._v(" 运行时常量池")]),a._v(" "),s("p",[a._v("运行时常量池是方法区的一部分。")]),a._v(" "),s("p",[a._v("Class 文件中的常量池（编译器生成的字面量和符号引用）会在类加载后被放入这个区域。")]),a._v(" "),s("p",[a._v("除了在编译期生成的常量，还允许动态生成，例如 String 类的 intern()。")]),a._v(" "),s("h3",{attrs:{id:"直接内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#直接内存"}},[a._v("#")]),a._v(" 直接内存")]),a._v(" "),s("p",[a._v("在 JDK 1.4 中新引入了 NIO 类，它可以使用 Native 函数库直接分配堆外内存，然后通过 Java 堆里的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在堆内存和堆外内存来回拷贝数据。")]),a._v(" "),s("h2",{attrs:{id:"二、垃圾收集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、垃圾收集"}},[a._v("#")]),a._v(" 二、垃圾收集")]),a._v(" "),s("p",[a._v("垃圾收集主要是针对堆和方法区进行。程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后就会消失，因此不需要对这三个区域进行垃圾回收。")]),a._v(" "),s("h3",{attrs:{id:"判断一个对象是否可被回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断一个对象是否可被回收"}},[a._v("#")]),a._v(" 判断一个对象是否可被回收")]),a._v(" "),s("h4",{attrs:{id:"_1-引用计数算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-引用计数算法"}},[a._v("#")]),a._v(" 1. 引用计数算法")]),a._v(" "),s("p",[a._v("为对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。")]),a._v(" "),s("p",[a._v("在两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。正是因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Test")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Test")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Test")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("doSomething")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("在上述代码中，a 与 b 引用的对象实例互相持有了对象的引用，因此当我们把对 a 对象与 b 对象的引用去除之后，由于两个对象还存在互相之间的引用，导致两个 Test 对象无法被回收。")]),a._v(" "),s("h4",{attrs:{id:"_2-可达性分析算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-可达性分析算法"}},[a._v("#")]),a._v(" 2. 可达性分析算法")]),a._v(" "),s("p",[a._v("以 GC Roots 为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。")]),a._v(" "),s("p",[a._v("Java 虚拟机使用该算法来判断对象是否可被回收，GC Roots 一般包含以下内容：")]),a._v(" "),s("ul",[s("li",[a._v("虚拟机栈中局部变量表中引用的对象")]),a._v(" "),s("li",[a._v("本地方法栈中 JNI 中引用的对象")]),a._v(" "),s("li",[a._v("方法区中类静态属性引用的对象")]),a._v(" "),s("li",[a._v("方法区中的常量引用的对象")])]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/83d909d2-3858-4fe1-8ff4-16471db0b180.png",width:"350px"}})]),s("br"),a._v(" "),s("h4",{attrs:{id:"_3-方法区的回收"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-方法区的回收"}},[a._v("#")]),a._v(" 3. 方法区的回收")]),a._v(" "),s("p",[a._v("因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所以在方法区上进行回收性价比不高。")]),a._v(" "),s("p",[a._v("主要是对常量池的回收和对类的卸载。")]),a._v(" "),s("p",[a._v("为了避免内存溢出，在大量使用反射和动态代理的场景都需要虚拟机具备类卸载功能。")]),a._v(" "),s("p",[a._v("类的卸载条件很多，需要满足以下三个条件，并且满足了条件也不一定会被卸载：")]),a._v(" "),s("ul",[s("li",[a._v("该类所有的实例都已经被回收，此时堆中不存在该类的任何实例。")]),a._v(" "),s("li",[a._v("加载该类的 ClassLoader 已经被回收。")]),a._v(" "),s("li",[a._v("该类对应的 Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。")])]),a._v(" "),s("h4",{attrs:{id:"_4-finalize"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-finalize"}},[a._v("#")]),a._v(" 4. finalize()")]),a._v(" "),s("p",[a._v("类似 C++ 的析构函数，用于关闭外部资源。但是 try-finally 等方式可以做得更好，并且该方法运行代价很高，不确定性大，无法保证各个对象的调用顺序，因此最好不要使用。")]),a._v(" "),s("p",[a._v("当一个对象可被回收时，如果需要执行该对象的 finalize() 方法，那么就有可能在该方法中让对象重新被引用，从而实现自救。自救只能进行一次，如果回收的对象之前调用了 finalize() 方法自救，后面回收时不会再调用该方法。")]),a._v(" "),s("h3",{attrs:{id:"引用类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用类型"}},[a._v("#")]),a._v(" 引用类型")]),a._v(" "),s("p",[a._v("无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否可达，判定对象是否可被回收都与引用有关。")]),a._v(" "),s("p",[a._v("Java 提供了四种强度不同的引用类型。")]),a._v(" "),s("h4",{attrs:{id:"_1-强引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-强引用"}},[a._v("#")]),a._v(" 1. 强引用")]),a._v(" "),s("p",[a._v("被强引用关联的对象不会被回收。")]),a._v(" "),s("p",[a._v("使用 new 一个新对象的方式来创建强引用。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h4",{attrs:{id:"_2-软引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-软引用"}},[a._v("#")]),a._v(" 2. 软引用")]),a._v(" "),s("p",[a._v("被软引用关联的对象只有在内存不够的情况下才会被回收。")]),a._v(" "),s("p",[a._v("使用 SoftReference 类来创建软引用。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SoftReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" sf "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SoftReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 使对象只被软引用关联")]),a._v("\n")])])]),s("h4",{attrs:{id:"_3-弱引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-弱引用"}},[a._v("#")]),a._v(" 3. 弱引用")]),a._v(" "),s("p",[a._v("被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。")]),a._v(" "),s("p",[a._v("使用 WeakReference 类来创建弱引用。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("WeakReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" wf "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("WeakReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h4",{attrs:{id:"_4-虚引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-虚引用"}},[a._v("#")]),a._v(" 4. 虚引用")]),a._v(" "),s("p",[a._v("又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。")]),a._v(" "),s("p",[a._v("为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。")]),a._v(" "),s("p",[a._v("使用 PhantomReference 来创建虚引用。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PhantomReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" pf "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PhantomReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nobj "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h3",{attrs:{id:"垃圾收集算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集算法"}},[a._v("#")]),a._v(" 垃圾收集算法")]),a._v(" "),s("h4",{attrs:{id:"_1-标记-清除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-标记-清除"}},[a._v("#")]),a._v(" 1. 标记 - 清除")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/005b481b-502b-4e3f-985d-d043c2b330aa.png",width:"400px"}})]),s("br"),a._v(" "),s("p",[a._v("在标记阶段，程序会检查每个对象是否为活动对象，如果是活动对象，则程序会在对象头部打上标记。")]),a._v(" "),s("p",[a._v("在清除阶段，会进行对象回收并取消标志位，另外，还会判断回收后的分块与前一个空闲分块是否连续，若连续，会合并这两个分块。回收对象就是把对象作为分块，连接到被称为 “空闲链表” 的单向链表，之后进行分配时只需要遍历这个空闲链表，就可以找到分块。")]),a._v(" "),s("p",[a._v("在分配时，程序会搜索空闲链表寻找空间大于等于新对象大小 size 的块 block。如果它找到的块等于 size，会直接返回这个分块；如果找到的块大于 size，会将块分割成大小为 size 与 (block - size) 的两部分，返回大小为 size 的分块，并把大小为 (block - size) 的块返回给空闲链表。")]),a._v(" "),s("p",[a._v("不足：")]),a._v(" "),s("ul",[s("li",[a._v("标记和清除过程效率都不高；")]),a._v(" "),s("li",[a._v("会产生大量不连续的内存碎片，导致无法给大对象分配内存。")])]),a._v(" "),s("h4",{attrs:{id:"_2-标记-整理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-标记-整理"}},[a._v("#")]),a._v(" 2. 标记 - 整理")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ccd773a5-ad38-4022-895c-7ac318f31437.png",width:"400px"}})]),s("br"),a._v(" "),s("p",[a._v("让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。")]),a._v(" "),s("p",[a._v("优点:")]),a._v(" "),s("ul",[s("li",[a._v("不会产生内存碎片")])]),a._v(" "),s("p",[a._v("不足:")]),a._v(" "),s("ul",[s("li",[a._v("需要移动大量对象，处理效率比较低。")])]),a._v(" "),s("h4",{attrs:{id:"_3-复制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-复制"}},[a._v("#")]),a._v(" 3. 复制")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/b2b77b9e-958c-4016-8ae5-9c6edd83871e.png",width:"400px"}})]),s("br"),a._v(" "),s("p",[a._v("将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。")]),a._v(" "),s("p",[a._v("主要不足是只使用了内存的一半。")]),a._v(" "),s("p",[a._v("现在的商业虚拟机都采用这种收集算法回收新生代，但是并不是划分为大小相等的两块，而是一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 和其中一块 Survivor。在回收时，将 Eden 和 Survivor 中还存活着的对象全部复制到另一块 Survivor 上，最后清理 Eden 和使用过的那一块 Survivor。")]),a._v(" "),s("p",[a._v("HotSpot 虚拟机的 Eden 和 Survivor 大小比例默认为 8:1，保证了内存的利用率达到 90%。如果每次回收有多于 10% 的对象存活，那么一块 Survivor 就不够用了，此时需要依赖于老年代进行空间分配担保，也就是借用老年代的空间存储放不下的对象。")]),a._v(" "),s("h4",{attrs:{id:"_4-分代收集"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-分代收集"}},[a._v("#")]),a._v(" 4. 分代收集")]),a._v(" "),s("p",[a._v("现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。")]),a._v(" "),s("p",[a._v("一般将堆分为新生代和老年代。")]),a._v(" "),s("ul",[s("li",[a._v("新生代使用：复制算法")]),a._v(" "),s("li",[a._v("老年代使用：标记 - 清除 或者 标记 - 整理 算法")])]),a._v(" "),s("h3",{attrs:{id:"垃圾收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器"}},[a._v("#")]),a._v(" 垃圾收集器")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c625baa0-dde6-449e-93df-c3a67f2f430f.jpg",width:""}})]),s("br"),a._v(" "),s("p",[a._v("以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。")]),a._v(" "),s("ul",[s("li",[a._v("单线程与多线程：单线程指的是垃圾收集器只使用一个线程，而多线程使用多个线程；")]),a._v(" "),s("li",[a._v("串行与并行：串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并行指的是垃圾收集器和用户程序同时执行。除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。")])]),a._v(" "),s("h4",{attrs:{id:"_1-serial-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-serial-收集器"}},[a._v("#")]),a._v(" 1. Serial 收集器")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/22fda4ae-4dd5-489d-ab10-9ebfdad22ae0.jpg",width:""}})]),s("br"),a._v(" "),s("p",[a._v("Serial 翻译为串行，也就是说它以串行的方式执行。")]),a._v(" "),s("p",[a._v("它是单线程的收集器，只会使用一个线程进行垃圾收集工作。")]),a._v(" "),s("p",[a._v("它的优点是简单高效，在单个 CPU 环境下，由于没有线程交互的开销，因此拥有最高的单线程收集效率。")]),a._v(" "),s("p",[a._v("它是 Client 场景下的默认新生代收集器，因为在该场景下内存一般来说不会很大。它收集一两百兆垃圾的停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿时间是可以接受的。")]),a._v(" "),s("h4",{attrs:{id:"_2-parnew-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-parnew-收集器"}},[a._v("#")]),a._v(" 2. ParNew 收集器")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/81538cd5-1bcf-4e31-86e5-e198df1e013b.jpg",width:""}})]),s("br"),a._v(" "),s("p",[a._v("它是 Serial 收集器的多线程版本。")]),a._v(" "),s("p",[a._v("它是 Server 场景下默认的新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合使用。")]),a._v(" "),s("h4",{attrs:{id:"_3-parallel-scavenge-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-parallel-scavenge-收集器"}},[a._v("#")]),a._v(" 3. Parallel Scavenge 收集器")]),a._v(" "),s("p",[a._v("与 ParNew 一样是多线程收集器。")]),a._v(" "),s("p",[a._v("其它收集器目标是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，因此它被称为“吞吐量优先”收集器。这里的吞吐量指 CPU 用于运行用户程序的时间占总时间的比值。")]),a._v(" "),s("p",[a._v("停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，适合在后台运算而不需要太多交互的任务。")]),a._v(" "),s("p",[a._v("缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。")]),a._v(" "),s("p",[a._v("可以通过一个开关参数打开 GC 自适应的调节策略（GC Ergonomics），就不需要手工指定新生代的大小（-Xmn）、Eden 和 Survivor 区的比例、晋升老年代对象年龄等细节参数了。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。")]),a._v(" "),s("h4",{attrs:{id:"_4-serial-old-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-serial-old-收集器"}},[a._v("#")]),a._v(" 4. Serial Old 收集器")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/08f32fd3-f736-4a67-81ca-295b2a7972f2.jpg",width:""}})]),s("br"),a._v(" "),s("p",[a._v("是 Serial 收集器的老年代版本，也是给 Client 场景下的虚拟机使用。如果用在 Server 场景下，它有两大用途：")]),a._v(" "),s("ul",[s("li",[a._v("在 JDK 1.5 以及之前版本（Parallel Old 诞生以前）中与 Parallel Scavenge 收集器搭配使用。")]),a._v(" "),s("li",[a._v("作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。")])]),a._v(" "),s("h4",{attrs:{id:"_5-parallel-old-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-parallel-old-收集器"}},[a._v("#")]),a._v(" 5. Parallel Old 收集器")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/278fe431-af88-4a95-a895-9c3b80117de3.jpg",width:""}})]),s("br"),a._v(" "),s("p",[a._v("是 Parallel Scavenge 收集器的老年代版本。")]),a._v(" "),s("p",[a._v("在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器。")]),a._v(" "),s("h4",{attrs:{id:"_6-cms-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-cms-收集器"}},[a._v("#")]),a._v(" 6. CMS 收集器")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/62e77997-6957-4b68-8d12-bfd609bb2c68.jpg",width:""}})]),s("br"),a._v(" "),s("p",[a._v("CMS（Concurrent Mark Sweep），Mark Sweep 指的是标记 - 清除算法。")]),a._v(" "),s("p",[a._v("分为以下四个流程：")]),a._v(" "),s("ul",[s("li",[a._v("初始标记：仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。")]),a._v(" "),s("li",[a._v("并发标记：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。")]),a._v(" "),s("li",[a._v("重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。")]),a._v(" "),s("li",[a._v("并发清除：不需要停顿。")])]),a._v(" "),s("p",[a._v("在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。")]),a._v(" "),s("p",[a._v("具有以下缺点：")]),a._v(" "),s("ul",[s("li",[a._v("吞吐量低：低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。")]),a._v(" "),s("li",[a._v("无法处理浮动垃圾，可能出现 Concurrent Mode Failure。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS。")]),a._v(" "),s("li",[a._v("标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。")])]),a._v(" "),s("h4",{attrs:{id:"_7-g1-收集器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-g1-收集器"}},[a._v("#")]),a._v(" 7. G1 收集器")]),a._v(" "),s("p",[a._v("G1（Garbage-First），它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。")]),a._v(" "),s("p",[a._v("堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/4cf711a8-7ab2-4152-b85c-d5c226733807.png",width:"600"}})]),s("br"),a._v(" "),s("p",[a._v("G1 把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/9bbddeeb-e939-41f0-8e8e-2b1a0aa7e0a7.png",width:"600"}})]),s("br"),a._v(" "),s("p",[a._v("通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。")]),a._v(" "),s("p",[a._v("每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/f99ee771-c56f-47fb-9148-c0036695b5fe.jpg",width:""}})]),s("br"),a._v(" "),s("p",[a._v("如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤：")]),a._v(" "),s("ul",[s("li",[a._v("初始标记")]),a._v(" "),s("li",[a._v("并发标记")]),a._v(" "),s("li",[a._v("最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。")]),a._v(" "),s("li",[a._v("筛选回收：首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。")])]),a._v(" "),s("p",[a._v("具备如下特点：")]),a._v(" "),s("ul",[s("li",[a._v("空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。")]),a._v(" "),s("li",[a._v("可预测的停顿：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。")])]),a._v(" "),s("h2",{attrs:{id:"三、内存分配与回收策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、内存分配与回收策略"}},[a._v("#")]),a._v(" 三、内存分配与回收策略")]),a._v(" "),s("h3",{attrs:{id:"minor-gc-和-full-gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#minor-gc-和-full-gc"}},[a._v("#")]),a._v(" Minor GC 和 Full GC")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("Minor GC：回收新生代，因为新生代对象存活时间很短，因此 Minor GC 会频繁执行，执行的速度一般也会比较快。")])]),a._v(" "),s("li",[s("p",[a._v("Full GC：回收老年代和新生代，老年代对象其存活时间长，因此 Full GC 很少执行，执行速度会比 Minor GC 慢很多。")])])]),a._v(" "),s("h3",{attrs:{id:"内存分配策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存分配策略"}},[a._v("#")]),a._v(" 内存分配策略")]),a._v(" "),s("h4",{attrs:{id:"_1-对象优先在-eden-分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-对象优先在-eden-分配"}},[a._v("#")]),a._v(" 1. 对象优先在 Eden 分配")]),a._v(" "),s("p",[a._v("大多数情况下，对象在新生代 Eden 上分配，当 Eden 空间不够时，发起 Minor GC。")]),a._v(" "),s("h4",{attrs:{id:"_2-大对象直接进入老年代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-大对象直接进入老年代"}},[a._v("#")]),a._v(" 2. 大对象直接进入老年代")]),a._v(" "),s("p",[a._v("大对象是指需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组。")]),a._v(" "),s("p",[a._v("经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。")]),a._v(" "),s("p",[a._v("-XX:PretenureSizeThreshold，大于此值的对象直接在老年代分配，避免在 Eden 和 Survivor 之间的大量内存复制。")]),a._v(" "),s("h4",{attrs:{id:"_3-长期存活的对象进入老年代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-长期存活的对象进入老年代"}},[a._v("#")]),a._v(" 3. 长期存活的对象进入老年代")]),a._v(" "),s("p",[a._v("为对象定义年龄计数器，对象在 Eden 出生并经过 Minor GC 依然存活，将移动到 Survivor 中，年龄就增加 1 岁，增加到一定年龄则移动到老年代中。")]),a._v(" "),s("p",[a._v("-XX:MaxTenuringThreshold 用来定义年龄的阈值。")]),a._v(" "),s("h4",{attrs:{id:"_4-动态对象年龄判定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-动态对象年龄判定"}},[a._v("#")]),a._v(" 4. 动态对象年龄判定")]),a._v(" "),s("p",[a._v("虚拟机并不是永远要求对象的年龄必须达到 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 MaxTenuringThreshold 中要求的年龄。")]),a._v(" "),s("h4",{attrs:{id:"_5-空间分配担保"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-空间分配担保"}},[a._v("#")]),a._v(" 5. 空间分配担保")]),a._v(" "),s("p",[a._v("在发生 Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果条件成立的话，那么 Minor GC 可以确认是安全的。")]),a._v(" "),s("p",[a._v("如果不成立的话虚拟机会查看 HandlePromotionFailure 的值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC；如果小于，或者 HandlePromotionFailure 的值不允许冒险，那么就要进行一次 Full GC。")]),a._v(" "),s("h3",{attrs:{id:"full-gc-的触发条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#full-gc-的触发条件"}},[a._v("#")]),a._v(" Full GC 的触发条件")]),a._v(" "),s("p",[a._v("对于 Minor GC，其触发条件非常简单，当 Eden 空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件：")]),a._v(" "),s("h4",{attrs:{id:"_1-调用-system-gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-调用-system-gc"}},[a._v("#")]),a._v(" 1. 调用 System.gc()")]),a._v(" "),s("p",[a._v("只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。")]),a._v(" "),s("h4",{attrs:{id:"_2-老年代空间不足"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-老年代空间不足"}},[a._v("#")]),a._v(" 2. 老年代空间不足")]),a._v(" "),s("p",[a._v("老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等。")]),a._v(" "),s("p",[a._v("为了避免以上原因引起的 Full GC，应当尽量不要创建过大的对象以及数组。除此之外，可以通过 -Xmn 虚拟机参数调大新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。还可以通过 -XX:MaxTenuringThreshold 调大对象进入老年代的年龄，让对象在新生代多存活一段时间。")]),a._v(" "),s("h4",{attrs:{id:"_3-空间分配担保失败"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-空间分配担保失败"}},[a._v("#")]),a._v(" 3. 空间分配担保失败")]),a._v(" "),s("p",[a._v("使用复制算法的 Minor GC 需要老年代的内存空间作担保，如果担保失败会执行一次 Full GC。具体内容请参考上面的第 5 小节。")]),a._v(" "),s("h4",{attrs:{id:"_4-jdk-1-7-及以前的永久代空间不足"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-jdk-1-7-及以前的永久代空间不足"}},[a._v("#")]),a._v(" 4. JDK 1.7 及以前的永久代空间不足")]),a._v(" "),s("p",[a._v("在 JDK 1.7 及以前，HotSpot 虚拟机中的方法区是用永久代实现的，永久代中存放的为一些 Class 的信息、常量、静态变量等数据。")]),a._v(" "),s("p",[a._v("当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么虚拟机会抛出 java.lang.OutOfMemoryError。")]),a._v(" "),s("p",[a._v("为避免以上原因引起的 Full GC，可采用的方法为增大永久代空间或转为使用 CMS GC。")]),a._v(" "),s("h4",{attrs:{id:"_5-concurrent-mode-failure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-concurrent-mode-failure"}},[a._v("#")]),a._v(" 5. Concurrent Mode Failure")]),a._v(" "),s("p",[a._v("执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足（可能是 GC 过程中浮动垃圾过多导致暂时性的空间不足），便会报 Concurrent Mode Failure 错误，并触发 Full GC。")]),a._v(" "),s("h2",{attrs:{id:"四、类加载机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、类加载机制"}},[a._v("#")]),a._v(" 四、类加载机制")]),a._v(" "),s("p",[a._v("类是在运行期间第一次使用时动态加载的，而不是一次性加载所有类。因为如果一次性加载，那么会占用很多的内存。")]),a._v(" "),s("h3",{attrs:{id:"类的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类的生命周期"}},[a._v("#")]),a._v(" 类的生命周期")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/335fe19c-4a76-45ab-9320-88c90d6a0d7e.png",width:"600px"}})]),s("br"),a._v(" "),s("p",[a._v("包括以下 7 个阶段：")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("加载（Loading）")])]),a._v(" "),s("li",[s("strong",[a._v("验证（Verification）")])]),a._v(" "),s("li",[s("strong",[a._v("准备（Preparation）")])]),a._v(" "),s("li",[s("strong",[a._v("解析（Resolution）")])]),a._v(" "),s("li",[s("strong",[a._v("初始化（Initialization）")])]),a._v(" "),s("li",[a._v("使用（Using）")]),a._v(" "),s("li",[a._v("卸载（Unloading）")])]),a._v(" "),s("h3",{attrs:{id:"类加载过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载过程"}},[a._v("#")]),a._v(" 类加载过程")]),a._v(" "),s("p",[a._v("包含了加载、验证、准备、解析和初始化这 5 个阶段。")]),a._v(" "),s("h4",{attrs:{id:"_1-加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-加载"}},[a._v("#")]),a._v(" 1. 加载")]),a._v(" "),s("p",[a._v("加载是类加载的一个阶段，注意不要混淆。")]),a._v(" "),s("p",[a._v("加载过程完成以下三件事：")]),a._v(" "),s("ul",[s("li",[a._v("通过类的完全限定名称获取定义该类的二进制字节流。")]),a._v(" "),s("li",[a._v("将该字节流表示的静态存储结构转换为方法区的运行时存储结构。")]),a._v(" "),s("li",[a._v("在内存中生成一个代表该类的 Class 对象，作为方法区中该类各种数据的访问入口。")])]),a._v(" "),s("p",[a._v("其中二进制字节流可以从以下方式中获取：")]),a._v(" "),s("ul",[s("li",[a._v("从 ZIP 包读取，成为 JAR、EAR、WAR 格式的基础。")]),a._v(" "),s("li",[a._v("从网络中获取，最典型的应用是 Applet。")]),a._v(" "),s("li",[a._v("运行时计算生成，例如动态代理技术，在 java.lang.reflect.Proxy 使用 ProxyGenerator.generateProxyClass 的代理类的二进制字节流。")]),a._v(" "),s("li",[a._v("由其他文件生成，例如由 JSP 文件生成对应的 Class 类。")])]),a._v(" "),s("h4",{attrs:{id:"_2-验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-验证"}},[a._v("#")]),a._v(" 2. 验证")]),a._v(" "),s("p",[a._v("确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。")]),a._v(" "),s("h4",{attrs:{id:"_3-准备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-准备"}},[a._v("#")]),a._v(" 3. 准备")]),a._v(" "),s("p",[a._v("类变量是被 static 修饰的变量，准备阶段为类变量分配内存并设置初始值，使用的是方法区的内存。")]),a._v(" "),s("p",[a._v("实例变量不会在这阶段分配内存，它会在对象实例化时随着对象一起被分配在堆中。应该注意到，实例化不是类加载的一个过程，类加载发生在所有实例化操作之前，并且类加载只进行一次，实例化可以进行多次。")]),a._v(" "),s("p",[a._v("初始值一般为 0 值，例如下面的类变量 value 被初始化为 0 而不是 123。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("如果类变量是常量，那么它将初始化为表达式所定义的值而不是 0。例如下面的常量 value 被初始化为 123 而不是 0。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h4",{attrs:{id:"_4-解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-解析"}},[a._v("#")]),a._v(" 4. 解析")]),a._v(" "),s("p",[a._v("将常量池的符号引用替换为直接引用的过程。")]),a._v(" "),s("p",[a._v("其中解析过程在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 的动态绑定。")]),a._v(" "),s("h4",{attrs:{id:"_5-初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-初始化"}},[a._v("#")]),a._v(" 5. 初始化")]),a._v(" "),s("div",{attrs:{data:"modify --\x3e"}}),a._v("\n初始化阶段才真正开始执行类中定义的 Java 程序代码。初始化阶段是虚拟机执行类构造器 <clinit\\>() 方法的过程。在准备阶段，类变量已经赋过一次系统要求的初始值，而在初始化阶段，根据程序员通过程序制定的主观计划去初始化类变量和其它资源。\n"),s("p",[a._v("<clinit>() 是由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。特别注意的是，静态语句块只能访问到定义在它之前的类变量，定义在它之后的类变量只能赋值，不能访问。例如以下代码：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Test")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("                "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 给变量赋值可以正常编译通过")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 这句编译器会提示“非法向前引用”")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("由于父类的 <clinit>() 方法先执行，也就意味着父类中定义的静态语句块的执行要优先于子类。例如以下代码：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Parent")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Sub")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Parent")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n     "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Sub")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 2")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("接口中不可以使用静态语句块，但仍然有类变量初始化的赋值操作，因此接口与类一样都会生成 <clinit>() 方法。但接口与类不同的是，执行接口的 <clinit>() 方法不需要先执行父接口的 <clinit>() 方法。只有当父接口中定义的变量使用时，父接口才会初始化。另外，接口的实现类在初始化时也一样不会执行接口的 <clinit>() 方法。")]),a._v(" "),s("p",[a._v("虚拟机会保证一个类的 <clinit>() 方法在多线程环境下被正确的加锁和同步，如果多个线程同时初始化一个类，只会有一个线程执行这个类的 <clinit>() 方法，其它线程都会阻塞等待，直到活动线程执行 <clinit>() 方法完毕。如果在一个类的 <clinit>() 方法中有耗时的操作，就可能造成多个线程阻塞，在实际过程中此种阻塞很隐蔽。")]),a._v(" "),s("h3",{attrs:{id:"类初始化时机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类初始化时机"}},[a._v("#")]),a._v(" 类初始化时机")]),a._v(" "),s("h4",{attrs:{id:"_1-主动引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-主动引用"}},[a._v("#")]),a._v(" 1. 主动引用")]),a._v(" "),s("p",[a._v("虚拟机规范中并没有强制约束何时进行加载，但是规范严格规定了有且只有下列五种情况必须对类进行初始化（加载、验证、准备都会随之发生）：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类没有进行过初始化，则必须先触发其初始化。最常见的生成这 4 条指令的场景是：使用 new 关键字实例化对象的时候；读取或设置一个类的静态字段（被 final 修饰、已在编译期把结果放入常量池的静态字段除外）的时候；以及调用一个类的静态方法的时候。")])]),a._v(" "),s("li",[s("p",[a._v("使用 java.lang.reflect 包的方法对类进行反射调用的时候，如果类没有进行初始化，则需要先触发其初始化。")])]),a._v(" "),s("li",[s("p",[a._v("当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。")])]),a._v(" "),s("li",[s("p",[a._v("当虚拟机启动时，用户需要指定一个要执行的主类（包含 main() 方法的那个类），虚拟机会先初始化这个主类；")])]),a._v(" "),s("li",[s("p",[a._v("当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic, REF_putStatic, REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化；")])])]),a._v(" "),s("h4",{attrs:{id:"_2-被动引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-被动引用"}},[a._v("#")]),a._v(" 2. 被动引用")]),a._v(" "),s("p",[a._v("以上 5 种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发初始化，称为被动引用。被动引用的常见例子包括：")]),a._v(" "),s("ul",[s("li",[a._v("通过子类引用父类的静态字段，不会导致子类初始化。")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SubClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// value 字段在 SuperClass 中定义")]),a._v("\n")])])]),s("ul",[s("li",[a._v("通过数组定义来引用类，不会触发此类的初始化。该过程会对数组类进行初始化，数组类是一个由虚拟机自动生成的、直接继承自 Object 的子类，其中包含了数组的属性和方法。")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SuperClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" sca "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SuperClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("ul",[s("li",[a._v("常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ConstClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("HELLOWORLD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h3",{attrs:{id:"类与类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类与类加载器"}},[a._v("#")]),a._v(" 类与类加载器")]),a._v(" "),s("p",[a._v("两个类相等，需要类本身相等，并且使用同一个类加载器进行加载。这是因为每一个类加载器都拥有一个独立的类名称空间。")]),a._v(" "),s("p",[a._v("这里的相等，包括类的 Class 对象的 equals() 方法、isAssignableFrom() 方法、isInstance() 方法的返回结果为 true，也包括使用 instanceof 关键字做对象所属关系判定结果为 true。")]),a._v(" "),s("h3",{attrs:{id:"类加载器分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载器分类"}},[a._v("#")]),a._v(" 类加载器分类")]),a._v(" "),s("p",[a._v("从 Java 虚拟机的角度来讲，只存在以下两种不同的类加载器：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("启动类加载器（Bootstrap ClassLoader），使用 C++ 实现，是虚拟机自身的一部分；")])]),a._v(" "),s("li",[s("p",[a._v("所有其它类的加载器，使用 Java 实现，独立于虚拟机，继承自抽象类 java.lang.ClassLoader。")])])]),a._v(" "),s("p",[a._v("从 Java 开发人员的角度看，类加载器可以划分得更细致一些：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("启动类加载器（Bootstrap ClassLoader）此类加载器负责将存放在 <JRE_HOME>\\lib 目录中的，或者被 -Xbootclasspath 参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如 rt.jar，名字不符合的类库即使放在 lib 目录中也不会被加载）类库加载到虚拟机内存中。启动类加载器无法被 Java 程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给启动类加载器，直接使用 null 代替即可。")])]),a._v(" "),s("li",[s("p",[a._v("扩展类加载器（Extension ClassLoader）这个类加载器是由 ExtClassLoader（sun.misc.Launcher$ExtClassLoader）实现的。它负责将 <JAVA_HOME>/lib/ext 或者被 java.ext.dir 系统变量所指定路径中的所有类库加载到内存中，开发者可以直接使用扩展类加载器。")])]),a._v(" "),s("li",[s("p",[a._v("应用程序类加载器（Application ClassLoader）这个类加载器是由 AppClassLoader（sun.misc.Launcher$AppClassLoader）实现的。由于这个类加载器是 ClassLoader 中的 getSystemClassLoader() 方法的返回值，因此一般称为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。")])])]),a._v(" "),s("h3",{attrs:{id:"双亲委派模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派模型"}},[a._v("#")]),a._v(" 双亲委派模型")]),a._v(" "),s("p",[a._v("应用程序是由三种类加载器互相配合从而实现类加载，除此之外还可以加入自己定义的类加载器。")]),a._v(" "),s("p",[a._v("下图展示了类加载器之间的层次关系，称为双亲委派模型（Parents Delegation Model）。该模型要求除了顶层的启动类加载器外，其它的类加载器都要有自己的父类加载器。这里的父子关系一般通过组合关系（Composition）来实现，而不是继承关系（Inheritance）。")]),a._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/0dd2d40a-5b2b-4d45-b176-e75a4cd4bdbf.png",width:"500px"}})]),s("br"),a._v(" "),s("h4",{attrs:{id:"_1-工作过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-工作过程"}},[a._v("#")]),a._v(" 1. 工作过程")]),a._v(" "),s("p",[a._v("一个类加载器首先将类加载请求转发到父类加载器，只有当父类加载器无法完成时才尝试自己加载。")]),a._v(" "),s("h4",{attrs:{id:"_2-好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-好处"}},[a._v("#")]),a._v(" 2. 好处")]),a._v(" "),s("p",[a._v("使得 Java 类随着它的类加载器一起具有一种带有优先级的层次关系，从而使得基础类得到统一。")]),a._v(" "),s("p",[a._v("例如 java.lang.Object 存放在 rt.jar 中，如果编写另外一个 java.lang.Object 并放到 ClassPath 中，程序可以编译通过。由于双亲委派模型的存在，所以在 rt.jar 中的 Object 比在 ClassPath 中的 Object 优先级更高，这是因为 rt.jar 中的 Object 使用的是启动类加载器，而 ClassPath 中的 Object 使用的是应用程序类加载器。rt.jar 中的 Object 优先级更高，那么程序中所有的 Object 都是这个 Object。")]),a._v(" "),s("h4",{attrs:{id:"_3-实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现"}},[a._v("#")]),a._v(" 3. 实现")]),a._v(" "),s("p",[a._v("以下是抽象类 java.lang.ClassLoader 的代码片段，其中的 loadClass() 方法运行过程如下：先检查类是否已经加载过，如果没有则让父类加载器去加载。当父类加载器加载失败时抛出 ClassNotFoundException，此时尝试自己去加载。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("abstract")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// The parent class loader for delegation")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClassLoadingLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// First, check if the class has already been loaded")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("findLoadedClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("parent "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                        c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                        c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("findBootstrapClassOrNull")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// ClassNotFoundException thrown if class not found")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// from the non-null parent class loader")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// If still not found, then invoke findClass in order")]),a._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// to find the class.")]),a._v("\n                    c "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("findClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("resolveClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("findClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"自定义类加载器实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义类加载器实现"}},[a._v("#")]),a._v(" 自定义类加载器实现")]),a._v(" "),s("p",[a._v("以下代码中的 FileSystemClassLoader 是自定义类加载器，继承自 java.lang.ClassLoader，用于加载文件系统上的类。它首先根据类的全名在文件系统上查找类的字节代码文件（.class 文件），然后读取该文件内容，最后通过 defineClass() 方法来把这些字节代码转换成 java.lang.Class 类的实例。")]),a._v(" "),s("p",[a._v("java.lang.ClassLoader 的 loadClass() 实现了双亲委派模型的逻辑，自定义类加载器一般不去重写它，但是需要重写 findClass() 方法。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileSystemClassLoader")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassLoader")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" rootDir"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileSystemClassLoader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" rootDir"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("rootDir "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" rootDir"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("protected")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("findClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" classData "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClassData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("classData "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ClassNotFoundException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("defineClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" classData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" classData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getClassData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" className"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" path "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("classNameToPath")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("className"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InputStream")]),a._v(" ins "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileInputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ByteArrayOutputStream")]),a._v(" baos "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ByteArrayOutputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" bufferSize "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4096")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" buffer "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("byte")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("bufferSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" bytesNumRead"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("bytesNumRead "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" ins"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("read")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                baos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("buffer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" bytesNumRead"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" baos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("toByteArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IOException")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("classNameToPath")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" className"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" rootDir "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("File")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("separatorChar\n                "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" className"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("File")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("separatorChar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('".class"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[a._v("#")]),a._v(" 参考资料")]),a._v(" "),s("ul",[s("li",[a._v("周志明. 深入理解 Java 虚拟机 [M]. 机械工业出版社, 2011.")]),a._v(" "),s("li",[s("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.4",target:"_blank",rel:"noopener noreferrer"}},[a._v("Chapter 2. The Structure of the Java Virtual Machine"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://www.slideshare.net/benewu/jvm-memory",target:"_blank",rel:"noopener noreferrer"}},[a._v("Jvm memory"),s("OutboundLink")],1),a._v(" "),s("a",{attrs:{href:"http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/G1GettingStarted/index.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Getting Started with the G1 Garbage Collector"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"http://electrofriends.com/articles/jni/jni-part1-java-native-interface/",target:"_blank",rel:"noopener noreferrer"}},[a._v("JNI Part1: Java Native Interface Introduction and “Hello World” application"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://hackthejava.wordpress.com/2015/01/09/memory-architecture-by-jvmruntime-data-areas/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Memory Architecture Of JVM(Runtime Data Areas)"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://www.programcreek.com/2013/04/jvm-run-time-data-areas/",target:"_blank",rel:"noopener noreferrer"}},[a._v("JVM Run-Time Data Areas"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"http://www.drdobbs.com/architecture-and-design/android-on-x86-java-native-interface-and/240166271",target:"_blank",rel:"noopener noreferrer"}},[a._v("Android on x86: Java Native Interface and the Android Native Development Kit"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://crowhawk.github.io/2017/08/10/jvm_2/",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入理解 JVM(2)——GC 算法与内存分配策略"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://crowhawk.github.io/2017/08/15/jvm_3/",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入理解 JVM(3)——7 种垃圾收集器"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"http://blog.jamesdbloom.com/JVMInternals.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("JVM Internals"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://www.ibm.com/developerworks/cn/java/j-lo-classloader/index.html#code6",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入探讨 Java 类加载器"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"http://www.baeldung.com/java-weakhashmap",target:"_blank",rel:"noopener noreferrer"}},[a._v("Guide to WeakHashMap in Java"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://alvinalexander.com/java/jwarehouse/apache-tomcat-6.0.16/java/org/apache/el/util/ConcurrentCache.java.shtml",target:"_blank",rel:"noopener noreferrer"}},[a._v("Tomcat example source code file (ConcurrentCache.java)"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);